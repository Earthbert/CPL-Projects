prologue() ::= <<
    .text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main
>>

initObject(objectLabel, fieldsInit, parentInitLabel, stackSize) ::= <<
<objectLabel>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
<if(!stackSize.zero)>
    addiu   $sp $sp -<stackSize>
<else><endif>
    move    $s0 $a0
<if(parentInitLabel)>
    jal     <parentInitLabel>
<else><endif>
<fieldsInit>
    move    $a0 $s0
    addiu   $sp $fp 8
    lw      $ra 0($fp)
    lw      $s0 4($fp)
    lw      $fp 8($fp)
    jr      $ra
>>

methodDefinition(methodLabel, stackSize, methodBody, paramsSize) ::= <<
<methodLabel>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
<if(!stackSize.zero)>
    addiu   $sp $sp -<stackSize>
<else><endif>
    move    $s0 $a0
<methodBody>
    addiu   $sp $fp 8
    lw      $ra 0($fp)
    lw      $s0 4($fp)
    lw      $fp 8($fp)
<if(!paramsSize.zero)>
    addiu   $sp $sp <paramsSize>
<else><endif>
    jr      $ra
>>

methodCall(subject, staticType, methodOffset, dispatchLabel, fileNameLabel, line, params) ::= <<
<if(params)><params>
<else><endif>
<subject>
    bnez    $a0 <dispatchLabel>
    la      $a0 <fileNameLabel>
    li      $t1 <line>
    jal     _dispatch_abort
<dispatchLabel>:
<if(staticType)>
    la      $t1 <staticType>_dispTable
<else>
    lw      $t1 8($a0)
<endif>
    lw      $t1 <methodOffset>($t1)
    jalr    $t1
>>

new(className) ::= <<
    la      $a0 <className>_protObj
    jal     Object.copy
    jal     <className>_init 
>>

newSelf() ::= <<
    la      $s1 class_objTab
    lw      $t2 0($s0)
    sll     $t2 $t2 3
    addu    $s1 $s1 $t2
    lw      $a0 0($s1)
    jal     Object.copy
    lw      $s1 4($s1)
    jalr    $s1
>>

let(initExpr, offset, expr) ::= <<
<initExpr>
    sw      $a0 -<offset>($fp)
<expr>
>>

iff(condition, thenBranch, elseBranch, elseLabel, endLabel) ::= <<
<condition>
    lw      $t1 12($a0)
    beqz    $t1 <elseLabel>
<thenBranch>
    b       <endLabel>
<elseLabel>:
<elseBranch>
<endLabel>:
>>

isvoid(expr, trueLabel, falseLabel, endLabel) ::= <<
<expr>
    move    $t1 $a0
    la      $a0 <trueLabel>
    beqz    $t1 <endLabel>
    la      $a0 <falseLabel>
<endLabel>:
>>

binaryArithmOp(left, right, op, offset) ::= <<
<left>
    sw      $a0 -<offset>($fp)
<right>
    jal     Object.copy
    lw      $t1 -<offset>($fp)
    lw      $t1 12($t1)
    lw      $t2 12($a0)
    <op.instruction>     $t1 $t1 $t2
    sw      $t1 12($a0)
>>

neg(expr) ::= <<
<expr>
    jal     Object.copy
    lw      $t1 12($a0)
    neg     $t1 $t1
    sw      $t1 12($a0)
>>

not(expr, trueLabel, falseLabel, endLabel) ::= <<
<expr>
    move    $t1 $a0
    la      $a0 <trueLabel>
    bne     $t1 $a0 <endLabel>
    la      $a0 <falseLabel>
<endLabel>:
>>

reserveStack(size) ::= <<
    addiu   $sp $sp -<size>
>>

storeStack(offset) ::= <<
    sw      $a0 <offset>($sp)
>>

evaluateSelf() ::= <<
    move    $a0 $s0
>>

loadAddress(address) ::= <<
    la      $a0 <address>
>>

storeField(offset) ::= <<
    sw      $a0 <offset>($s0)
>>

loadField(offset) ::= <<
    lw      $a0 <offset>($s0)
>>

storeFormal(offset) ::= <<
    sw      $a0 <offset>($fp)
>>

loadFormal(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

storeLocal(offset) ::= <<
    sw      $a0 -<offset>($fp)
>>

loadLocal(offset) ::= <<
    lw      $a0 -<offset>($fp)
>>

loadImmediate(value) ::= <<
    li      $a0 <value>
>>